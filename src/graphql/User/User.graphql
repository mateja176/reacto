enum Role {
  regular
  admin
}
enum RegularRole {
  regular
}
enum AdminRole {
  admin
}

interface IUser implements Node & NamedNode {
  id: ID!
  email: String!
  name: String!
  company: Company!
  questionnaires: [Questionnaire!]!
}

type RegularUser implements Node & NamedNode & IUser {
  id: ID!
  email: String!
  name: String!
  role: RegularRole!
  company: Company!
  questionnaires: [Questionnaire!]!
}
type AdminUser implements Node & NamedNode & IUser {
  id: ID!
  email: String!
  name: String!
  role: AdminRole!
  company: Company!
  questionnaires: [Questionnaire!]!
  questionnaireConfigurations: [QuestionnaireConfiguration!]!
}

union User = RegularUser | AdminUser

type PendingUser implements Node {
  id: ID!
  email: String!
  role: Role!
  company: Company!
}

type Query {
  user(id: ID!): User!
}

input LoginInput {
  email: String!
  password: String!
}
type LoginOutput {
  token: String!
  user: User!
}

input InviteInput {
  email: String!
  role: Role!
}
type Mutation {
  logIn(input: LoginInput!): LoginOutput!
  invite(input: InviteInput!): PendingUser!
}
